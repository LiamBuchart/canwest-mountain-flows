{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d982b3fe",
   "metadata": {},
   "source": [
    "# Download Data and Make Map\n",
    "---\n",
    "# Pull Data from the native-land.ca API\n",
    "Territory and Name overlays come from Native Land Digital \n",
    "---\n",
    "`native-land.ca <native-land.ca>`_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4b99253",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imports\n",
    "import pandas as pd\n",
    "import geopandas as gpd\n",
    "import folium\n",
    "import numpy as np\n",
    "from shapely.geometry import Polygon\n",
    "from shapely.geometry import shape\n",
    "\n",
    "import requests\n",
    "import json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63daa8c4",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# api URL\n",
    "url = \"https://native-land.ca/wp-json/nativeland/v1/api/index.php\"\n",
    "\n",
    "# parameters of the download\n",
    "params = {\n",
    "    \"maps\" : \"territories\",\n",
    "    \"polygon_geojson\" : {\n",
    "        \"type\": \"FeatureCollection\",\n",
    "        \"features\": [\n",
    "            {\n",
    "            \"type\": \"Feature\",\n",
    "            \"properties\": {\"Name\"},\n",
    "            \"geometry\": {\n",
    "            \"type\": \"Polygon\",\n",
    "            \"coordinates\": [\n",
    "            [\n",
    "                [\n",
    "                -113.5,\n",
    "                61.25\n",
    "                ],\n",
    "                [\n",
    "                -160,\n",
    "                61.25\n",
    "                ],\n",
    "                [\n",
    "                -160,\n",
    "                47.25\n",
    "                ],\n",
    "                [\n",
    "                -113.5,\n",
    "                47.25\n",
    "                ],\n",
    "          ]\n",
    "        ]\n",
    "      }\n",
    "    }\n",
    "  ]\n",
    "}    \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b8c7b89f",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# download and convert to json\n",
    "response_API = requests.get(url=url, params=params)\n",
    "data = response_API.text\n",
    "\n",
    "#convert to json\n",
    "parse_json = json.loads(data)\n",
    "\n",
    "# make a geojson (not used currently)\n",
    "territory = {\n",
    "             \"type\": \"FeatureCollection\",\n",
    "             \"features\": response_API\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01358ad6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# dataframe of the json\n",
    "df_m = pd.DataFrame(parse_json)\n",
    "\n",
    "# initialize a map\n",
    "m = folium.Map(location=[55, -122], \n",
    "               zoom_start=4, \n",
    "               tiles=\"Stamen Terrain\",\n",
    "               name=\"Terrain\")\n",
    "\n",
    "# set map bounds\n",
    "m.fit_bounds([[47.25, -158], [61.25, -113.5]])\n",
    "\n",
    "shapesLayer = folium.FeatureGroup(name=\"Territories\",\n",
    "                                  show=False).add_to(m)\n",
    "popupLayer = folium.FeatureGroup(name=\"Names\",\n",
    "                                 show=False,).add_to(m)\n",
    "\n",
    "for ii in range( (len(df_m)-1) ):\n",
    "  df = df_m.iloc[ii]\n",
    "  nn = list(df[\"properties\"].values())[0]\n",
    "\n",
    "  df[\"geometry\"] = list(df[\"geometry\"].values())[0]\n",
    "\n",
    "  geo: dict = {\"type\": \"Polygon\",\n",
    "               \"coordinates\": df[\"geometry\"]}\n",
    "  try: \n",
    "    polygon: Polygon = shape(geo)\n",
    "    x, y = polygon.exterior.coords.xy\n",
    "\n",
    "    folium.GeoJson(polygon,\n",
    "                   zoom_on_click=True,\n",
    "                   show=False,).add_to(shapesLayer)\n",
    "\n",
    "    folium.CircleMarker(location=[np.mean(y), np.mean(x)],\n",
    "                        zoom_on_click=True,\n",
    "                        show=False,\n",
    "                        radius=2,\n",
    "                        color=\"orange\", \n",
    "                        fill_color=\"orange\",\n",
    "                        popup=str(nn)).add_to(popupLayer)\n",
    "    \n",
    "  except:\n",
    "    pass\n",
    "\n",
    "# display the layer switcher widget\n",
    "folium.LayerControl().add_to(m)\n",
    "\n",
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f241372",
   "metadata": {},
   "outputs": [],
   "source": [
    "# save the map object to be displayed on the home page\n",
    "m.save('canwest_flows.html')"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "main_language": "python",
   "notebook_metadata_filter": "-all"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
