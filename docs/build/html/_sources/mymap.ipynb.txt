{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "331c207f",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "# A Markdown cell\n",
    "- You can do all the fun stuff markdown has to offer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7dda1da",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imports\n",
    "import pandas as pd\n",
    "import geopandas as gpd\n",
    "import folium\n",
    "import numpy as np\n",
    "from shapely.geometry import Polygon\n",
    "from shapely.wkt import loads\n",
    "\n",
    "import requests\n",
    "import json\n",
    "import geojson"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1150c27a",
   "metadata": {},
   "source": [
    "# Pull Data from the native-land.ca API\n",
    "Territory and Name overlays come from Native Land Digital \n",
    "---\n",
    "`native-land.ca <native-land.ca>`_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d13462c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "url = \"https://native-land.ca/wp-json/nativeland/v1/api/index.php\"\n",
    "\n",
    "params = {\n",
    "    \"maps\" : \"territories\",\n",
    "    \"polygon_geojson\" : {\n",
    "        \"type\": \"FeatureCollection\",\n",
    "        \"features\": [\n",
    "            {\n",
    "            \"type\": \"Feature\",\n",
    "            \"properties\": {\"Name\"},\n",
    "            \"geometry\": {\n",
    "            \"type\": \"Polygon\",\n",
    "            \"coordinates\": [\n",
    "            [\n",
    "                [\n",
    "                -113.5,\n",
    "                61.25\n",
    "                ],\n",
    "                [\n",
    "                -160,\n",
    "                61.25\n",
    "                ],\n",
    "                [\n",
    "                -160,\n",
    "                47.25\n",
    "                ],\n",
    "                [\n",
    "                -113.5,\n",
    "                47.25\n",
    "                ],\n",
    "          ]\n",
    "        ]\n",
    "      }\n",
    "    }\n",
    "  ]\n",
    "}    \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a826e742",
   "metadata": {},
   "outputs": [],
   "source": [
    "# download and convert to json\n",
    "response_API = requests.get(url=url, params=params)\n",
    "data = response_API.text\n",
    "\n",
    "#print(data)\n",
    "parse_json = json.loads(data)\n",
    "\n",
    "# geojson\n",
    "territory = {\n",
    "             \"type\": \"FeatureCollection\",\n",
    "             \"features\": response_API\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66c9c1fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the file into a format for plotting\n",
    "\n",
    "#print(list(parse_json)[3].items())\n",
    "\n",
    "# load the json file in a geopandas dataframe thats easier to work with\n",
    "gdf = gpd.GeoDataFrame(parse_json)\n",
    "print(\"The dataframe: \")\n",
    "#print(type(gdf[\"geometry\"]))\n",
    "#print(gdf[\"geometry\"].astype(\"string\").iloc[0])\n",
    "#gdf = gdf[\"geometry\"].apply(loads)\n",
    "#gdf[\"geometry\"] = gdf[\"geometry\"].astype(\"string\")\n",
    "gdf = gdf.iloc[0]\n",
    "print(gdf)\n",
    "gdf.crs = \"epsg:4326\"\n",
    "gdf.to_crs = {'init' :'epsg:4326'}\n",
    "#geom = np.array(list(gdf[\"geometry\"].values()))\n",
    "#gdf[\"geometry\"] = geom\n",
    "#print(gdf)\n",
    "#gdf[\"geometry\"] = list(gdf[\"geometry\"].values())[0])\n",
    "#gdf[\"geometry\"] = gdf[\"geometry\"].astype(\"string\") #, dtype=\"string\" #list(gdf[\"geometry\"].values())\n",
    "#print(gdf[\"geometry\"])\n",
    "#geom = list(gdf[\"geometry\"].values())\n",
    "#print(\"NEXT\")\n",
    "#print(np.array(geom[0]))\n",
    "#print(type(gdf[\"geometry\"]), type(geom[0]), len(geom)) \n",
    "#gdf2 = gdf.set_geometry(\"geometry\")                                             \n",
    "#gdf = gdf[\"geometry\"].apply(loads)\n",
    "\n",
    "\n",
    "#print(gdf.columns)\n",
    "#print(gdf.head())\n",
    "#poly = Polygon(list(gdf[\"geometry\"]))\n",
    "#gdf.set_geometry(Polygon(gdf[\"geometry\"]))\n",
    "\n",
    "\n",
    "#gdf = gpd.GeoDataFrame(data).set_geometry('geometry')\n",
    "\n",
    "#print(gdf2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b7992f8",
   "metadata": {},
   "source": [
    "# Make the Map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abe0d075",
   "metadata": {},
   "outputs": [],
   "source": [
    "# initialize a map\n",
    "m = folium.Map(location=[55, -122], \n",
    "               zoom_start=4, \n",
    "               tiles=\"openstreetmap\",\n",
    "               name=\"Road Map\")\n",
    "\n",
    "# set map bounds\n",
    "m.fit_bounds([[47.25, -158], [61.25, -113.5]])\n",
    "\n",
    "# add terrain layer\n",
    "tr = folium.TileLayer(\"Stamen Terrain\",\n",
    "                 name=\"Terrain\").add_to(m)\n",
    "\n",
    "# add the native-land overlay\n",
    "#print(type(folium.Popup(list( parse_json[ii].values() )[2][\"Name\"])))\n",
    "\n",
    "# data\n",
    "folium.GeoJson(gdf,\n",
    "               name=\"Territories\",\n",
    "               show=False,\n",
    "               popup=\"Test\",\n",
    "               zoom_on_click=True).add_to(m)\n",
    "\n",
    "\n",
    "# loop through the native-land data and load data by creating polygon and popup\n",
    "#for ii in range(0, len(parse_json)):\n",
    "#    try:\n",
    "#      #folium.GeoJson(data, \n",
    "#      #               name=\"Territories\").add_to(m)\n",
    "#      \n",
    "#      t = folium.GeoJson(list(parse_json[ii].values()))\n",
    "#      t.add_child(folium.Popup(list( parse_json[ii].values() )[2][\"Name\"]))\n",
    "#      t.add_to(m)\n",
    "#    except:\n",
    "#      pass\n",
    "\n",
    "# add the layers to toggle\n",
    "folium.LayerControl().add_to(m)\n",
    "\n",
    "# display\n",
    "m\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4fe0ab79",
   "metadata": {},
   "outputs": [],
   "source": [
    "# sort out geometry issues\n",
    "from shapely.geometry import shape\n",
    "\n",
    "df_m = pd.DataFrame(parse_json)\n",
    "# initialize a map\n",
    "m = folium.Map(location=[55, -122], \n",
    "               zoom_start=4, \n",
    "               tiles=\"Stamen Terrain\",\n",
    "               name=\"Terrain\")\n",
    "\n",
    "shapesLayer = folium.FeatureGroup(name=\"Territories\").add_to(m)\n",
    "popupLayer = folium.FeatureGroup(name=\"Names\").add_to(m)\n",
    "\n",
    "for ii in range( (len(df_m)-1) ):\n",
    "  print(ii)\n",
    "  df = df_m.iloc[ii]\n",
    "  nn = list(df[\"properties\"].values())[0]\n",
    "\n",
    "  df[\"geometry\"] = list(df[\"geometry\"].values())[0]\n",
    "\n",
    "  geo: dict = {\"type\": \"Polygon\",\n",
    "               \"coordinates\": df[\"geometry\"]}\n",
    "  try: \n",
    "    polygon: Polygon = shape(geo)\n",
    "    x, y = polygon.exterior.coords.xy\n",
    "\n",
    "    folium.GeoJson(polygon,\n",
    "                   zoom_on_click=True).add_to(shapesLayer)\n",
    "\n",
    "    folium.CircleMarker(location=[np.mean(y), np.mean(x)],\n",
    "                        zoom_on_click=True,\n",
    "                        radius=2,\n",
    "                        color=\"orange\", \n",
    "                        fill_color=\"orange\",\n",
    "                        popup=str(nn)).add_to(popupLayer)\n",
    "    \n",
    "  except:\n",
    "    pass\n",
    "\n",
    "# display the layer switcher widget\n",
    "folium.LayerControl().add_to(m)\n",
    "\n",
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d972c279",
   "metadata": {},
   "outputs": [],
   "source": [
    "# save the map object to be displayed on the home page\n",
    "m.save('canwest_flows.html')"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "main_language": "python",
   "notebook_metadata_filter": "-all"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
